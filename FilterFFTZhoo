% Load data
load('Messdaten.mat');
load('Devabsolute.mat');

% Calculate percentage deviation
Dev_percentage_D = Dev_absolute_D ./ n_mech_extern(:,1) * 100;

% Handle infinite and NaN values
Dev_percentage_D(isinf(Dev_percentage_D)) = 0;
Dev_percentage_D(isnan(Dev_percentage_D)) = 0;

% Designing a low-pass Butterworth filter
order = 4; % Filter order
cutoff_frequency = 0.05; % Adjust the cutoff frequency as needed

[b, a] = butter(order, cutoff_frequency, 'low');

% Applying the filter to the signal
filtered_signal = filtfilt(b, a, abs(Dev_percentage_D)); % Applying filter to absolute value

% Plotting the original and filtered signals on the same graph
figure;
plot(n_mech_extern(:,2), Dev_percentage_D, '-b', 'MarkerSize', 10, 'DisplayName', 'Original Signal');
hold on;
plot(n_mech_extern(:,2), filtered_signal, '-r', 'MarkerSize', 10, 'DisplayName', 'Filtered Signal');
hold off;

xlim([0 400]);
ylim([-20 20]);
title("Original and Filtered Signals");
xlabel("Time in s");
ylabel("Percentage Deviation [%]");
legend;
grid;
