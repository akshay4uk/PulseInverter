% Load data
load('Messdaten.mat');
load('Devabsolute.mat');

% Designing a band-pass Butterworth filter
order = 4; % Filter order
low_cutoff_frequency = 0.02; % Adjust the low cutoff frequency as needed
high_cutoff_frequency = 0.08; % Adjust the high cutoff frequency as needed

[b_bandpass, a_bandpass] = butter(order, [low_cutoff_frequency, high_cutoff_frequency], 'bandpass');

% Applying the band-pass filter to the signal
filtered_signal_bandpass = filtfilt(b_bandpass, a_bandpass, Dev_absolute_D);

% Designing a low-pass Butterworth filter for comparison
cutoff_frequency = 0.05; % Adjust the cutoff frequency as needed
[b_lowpass, a_lowpass] = butter(order, cutoff_frequency, 'low');

% Applying the low-pass filter to the signal using filtfilt
filtered_signal_lowpass = filtfilt(b_lowpass, a_lowpass, Dev_absolute_D);

% Plotting the original and filtered signals on the same graph
figure;
plot(n_mech_extern(:,2), Dev_absolute_D, '-b', 'MarkerSize', 10, 'DisplayName', 'Original Signal');
hold on;
plot(n_mech_extern(:,2), filtered_signal_bandpass, '-r', 'MarkerSize', 10, 'DisplayName', 'Band-Pass Filtered Signal');
plot(n_mech_extern(:,2), filtered_signal_lowpass, '-g', 'MarkerSize', 10, 'DisplayName', 'Low-Pass Filtered Signal');
hold off;

xlim([0 400]);
ylim([0 max(Dev_absolute_D)]); % Adjust the y-axis limits as needed
title("Original and Filtered Signals");
xlabel("Time in s");
ylabel("Deviation");
legend;
grid;
