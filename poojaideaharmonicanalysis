% Load data from Messdaten.mat
load('Messdaten.mat');

% Define the time range of interest
start_time = 86.566; % Start time in seconds
end_time = 86.616;   % End time in seconds

% Extract data within the specified time range
time_range_indices = frq_el_intern(:,2) >= start_time & frq_el_intern(:,2) <= end_time;
Frequenz = frq_el_intern(time_range_indices, 1);
Zeit = frq_el_intern(time_range_indices, 2); % Extract time data

% Specify the pulses per revolution
pulses_per_revolution = 4;

% Calculate rotor speed (RPM) of the motor
RPM = (Frequenz * 60) / pulses_per_revolution;

% Define fundamental frequency (1x)
fundamental_frequency = mean(RPM);

% Define harmonic frequencies (w, 2w, 3w, 4w, 5w, 6w)
num_harmonics = 6;
harmonic_frequencies = fundamental_frequency * (1:num_harmonics);

% Perform harmonic analysis
harmonic_magnitudes = zeros(1, num_harmonics);
for i = 1:num_harmonics
    harmonic_magnitudes(i) = max(abs(RPM - i * fundamental_frequency));
end

% Display harmonic analysis results in tabular format
disp('Harmonic Analysis Results:');
disp('--------------------------');
disp('Harmonic   Frequency (RPM)   Magnitude');
for i = 1:num_harmonics
    fprintf('%8d \t %10.2f \t %10.4f\n', i, harmonic_frequencies(i), harmonic_magnitudes(i));
end

% Plot the harmonic analysis results
figure;
stem(harmonic_frequencies, harmonic_magnitudes, 'r', 'Marker', 'none', 'LineWidth', 2);
xlabel('Frequency (RPM)');
ylabel('Magnitude');
title('Harmonic Analysis of Rotor Speed (RPM)');
grid on;

% Save the plot as PNG file
print('-dpng', 'Harmonic_Analysis_Rotor_Speed.png');
