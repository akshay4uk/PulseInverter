% Load data from Messdaten.mat
load('Messdaten.mat');

% Define the time range of interest
start_time = 86.566; % Start time in seconds
end_time = 86.616;   % End time in seconds

% Extract data within the specified time range
time_range_indices = find(frq_el_intern(:,2) >= start_time & frq_el_intern(:,2) <= end_time);
Frequenz = frq_el_intern(time_range_indices, 1);
Zeit = frq_el_intern(time_range_indices, 2);

% Perform FFT
Fs = 1 / (Zeit(2) - Zeit(1)); % Sampling frequency in Hz
N = length(Frequenz); % Length of the signal
Frequenz_fft = abs(fft(Frequenz)); % Compute FFT
Frequenz_fft = Frequenz_fft(1:N/2+1); % Consider only the positive frequencies
Frequenz_fft(2:end-1) = 2 * Frequenz_fft(2:end-1); % Take the magnitude and consider symmetry

% Define frequencies corresponding to FFT bins
frequencies = Fs * (0:(N/2)) / N; 

% Set the frequency window of interest
min_freq = 0;  % Minimum frequency to display
max_freq = 1000; % Maximum frequency to display

% Find indices corresponding to the desired frequency window
idx_min = find(frequencies >= min_freq, 1, 'first');
idx_max = find(frequencies <= max_freq, 1, 'last');

% Perform harmonic analysis
threshold = 0.1 * max(Frequenz_fft); % Adjust the threshold as needed
[peaks, peak_indices] = findpeaks(Frequenz_fft(idx_min:idx_max), 'MinPeakHeight', threshold);
harmonic_frequencies = frequencies(idx_min+peak_indices-1);
harmonic_magnitudes = peaks;

% Plot original rotor signal
figure;
subplot(4, 1, 1);
plot(Zeit, Frequenz*60/4);
xlabel('Time (s)');
ylabel('Rotation Signal (1/min)');
title('Original Rotor Signal');
grid on;

% Plot the magnitude of the original signal
subplot(4, 1, 2);
plot(Zeit, abs(Frequenz));
xlabel('Time (s)');
ylabel('Magnitude');
title('Magnitude of Original Signal');
grid on;

% Plot the frequency spectrum
subplot(4, 1, 3);
plot(frequencies, Frequenz_fft);
xlabel('Frequency (Hz)');
ylabel('Amplitude');
title('FFT of Signal');
grid on;

% Highlight identified harmonic peaks
hold on;
plot(harmonic_frequencies, harmonic_magnitudes, 'r*');
hold off;

% Plot the noisy signal
subplot(4, 1, 4);
% Assuming the noisy signal is stored in a variable named 'noisy_signal'
plot(Zeit, noisy_signal);
xlabel('Time (s)');
ylabel('Noisy Signal');
title('Noisy Signal');
grid on;

% Save the plot as a PNG file
print('-dpng', 'Signal_Analysis.png');
